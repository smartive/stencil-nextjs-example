/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ACCORDION_VARIANTS } from "./components/accordion/export";
import { BUTTON_SIZES, BUTTON_TYPE, BUTTON_VARIANTS } from "./components/button/exports";
import { ICON_SIZES } from "./components/icons/exports";
export { ACCORDION_VARIANTS } from "./components/accordion/export";
export { BUTTON_SIZES, BUTTON_TYPE, BUTTON_VARIANTS } from "./components/button/exports";
export { ICON_SIZES } from "./components/icons/exports";
export namespace Components {
    interface AbcAccordion {
        "item"?: string;
        "open": boolean;
        "summary": string;
        "variant": ACCORDION_VARIANTS;
    }
    interface AbcAccordionGroup {
        "selectedAccordion": HTMLAbcAccordionElement['item'];
    }
    interface AbcButton {
        "ariaLabel": string;
        "as": BUTTON_TYPE;
        "disabled": boolean;
        "href": string;
        "size": BUTTON_SIZES;
        "target": '_blank' | '_self' | '_parent' | '_top';
        "type": 'button' | 'submit' | 'reset';
        "variant": BUTTON_VARIANTS;
    }
    interface AbcDropdown {
        "disabled": boolean;
        "error"?: string;
        "hint"?: string;
        "label": string;
        "open": boolean;
        "required": boolean;
        "selectedItem": HTMLAbcFlyoutItemElement['item'];
        "text": string;
    }
    interface AbcDropdownButton {
        "disabled": boolean;
        "label": string;
        "open": boolean;
        "placeholder": boolean;
        "required": boolean;
        "text": string;
    }
    interface AbcFlyout {
        "selectedItem": HTMLAbcFlyoutItemElement['item'];
    }
    interface AbcFlyoutItem {
        "focusItem": () => Promise<void>;
        "item": string;
        "label": string;
        "selected": boolean;
    }
    interface AbcIconChevronDown {
        "size": ICON_SIZES;
    }
}
export interface AbcAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAbcAccordionElement;
}
export interface AbcAccordionGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAbcAccordionGroupElement;
}
export interface AbcDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAbcDropdownElement;
}
export interface AbcDropdownButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAbcDropdownButtonElement;
}
export interface AbcFlyoutCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAbcFlyoutElement;
}
export interface AbcFlyoutItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAbcFlyoutItemElement;
}
declare global {
    interface HTMLAbcAccordionElementEventMap {
        "accordionClick": { open: boolean; item?: string };
    }
    interface HTMLAbcAccordionElement extends Components.AbcAccordion, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAbcAccordionElementEventMap>(type: K, listener: (this: HTMLAbcAccordionElement, ev: AbcAccordionCustomEvent<HTMLAbcAccordionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAbcAccordionElementEventMap>(type: K, listener: (this: HTMLAbcAccordionElement, ev: AbcAccordionCustomEvent<HTMLAbcAccordionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAbcAccordionElement: {
        prototype: HTMLAbcAccordionElement;
        new (): HTMLAbcAccordionElement;
    };
    interface HTMLAbcAccordionGroupElementEventMap {
        "accordionChange": HTMLAbcAccordionElement['item'];
    }
    interface HTMLAbcAccordionGroupElement extends Components.AbcAccordionGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAbcAccordionGroupElementEventMap>(type: K, listener: (this: HTMLAbcAccordionGroupElement, ev: AbcAccordionGroupCustomEvent<HTMLAbcAccordionGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAbcAccordionGroupElementEventMap>(type: K, listener: (this: HTMLAbcAccordionGroupElement, ev: AbcAccordionGroupCustomEvent<HTMLAbcAccordionGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAbcAccordionGroupElement: {
        prototype: HTMLAbcAccordionGroupElement;
        new (): HTMLAbcAccordionGroupElement;
    };
    interface HTMLAbcButtonElement extends Components.AbcButton, HTMLStencilElement {
    }
    var HTMLAbcButtonElement: {
        prototype: HTMLAbcButtonElement;
        new (): HTMLAbcButtonElement;
    };
    interface HTMLAbcDropdownElementEventMap {
        "dropdownChange": HTMLAbcFlyoutItemElement['item'];
    }
    interface HTMLAbcDropdownElement extends Components.AbcDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAbcDropdownElementEventMap>(type: K, listener: (this: HTMLAbcDropdownElement, ev: AbcDropdownCustomEvent<HTMLAbcDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAbcDropdownElementEventMap>(type: K, listener: (this: HTMLAbcDropdownElement, ev: AbcDropdownCustomEvent<HTMLAbcDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAbcDropdownElement: {
        prototype: HTMLAbcDropdownElement;
        new (): HTMLAbcDropdownElement;
    };
    interface HTMLAbcDropdownButtonElementEventMap {
        "dropdownButtonFocus": void;
        "dropdownButtonBlur": void;
        "dropdownButtonClick": void;
    }
    interface HTMLAbcDropdownButtonElement extends Components.AbcDropdownButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAbcDropdownButtonElementEventMap>(type: K, listener: (this: HTMLAbcDropdownButtonElement, ev: AbcDropdownButtonCustomEvent<HTMLAbcDropdownButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAbcDropdownButtonElementEventMap>(type: K, listener: (this: HTMLAbcDropdownButtonElement, ev: AbcDropdownButtonCustomEvent<HTMLAbcDropdownButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAbcDropdownButtonElement: {
        prototype: HTMLAbcDropdownButtonElement;
        new (): HTMLAbcDropdownButtonElement;
    };
    interface HTMLAbcFlyoutElementEventMap {
        "flyoutChange": HTMLAbcFlyoutItemElement['item'];
    }
    interface HTMLAbcFlyoutElement extends Components.AbcFlyout, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAbcFlyoutElementEventMap>(type: K, listener: (this: HTMLAbcFlyoutElement, ev: AbcFlyoutCustomEvent<HTMLAbcFlyoutElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAbcFlyoutElementEventMap>(type: K, listener: (this: HTMLAbcFlyoutElement, ev: AbcFlyoutCustomEvent<HTMLAbcFlyoutElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAbcFlyoutElement: {
        prototype: HTMLAbcFlyoutElement;
        new (): HTMLAbcFlyoutElement;
    };
    interface HTMLAbcFlyoutItemElementEventMap {
        "itemClick": { item: string; selected: boolean };
    }
    interface HTMLAbcFlyoutItemElement extends Components.AbcFlyoutItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAbcFlyoutItemElementEventMap>(type: K, listener: (this: HTMLAbcFlyoutItemElement, ev: AbcFlyoutItemCustomEvent<HTMLAbcFlyoutItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAbcFlyoutItemElementEventMap>(type: K, listener: (this: HTMLAbcFlyoutItemElement, ev: AbcFlyoutItemCustomEvent<HTMLAbcFlyoutItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAbcFlyoutItemElement: {
        prototype: HTMLAbcFlyoutItemElement;
        new (): HTMLAbcFlyoutItemElement;
    };
    interface HTMLAbcIconChevronDownElement extends Components.AbcIconChevronDown, HTMLStencilElement {
    }
    var HTMLAbcIconChevronDownElement: {
        prototype: HTMLAbcIconChevronDownElement;
        new (): HTMLAbcIconChevronDownElement;
    };
    interface HTMLElementTagNameMap {
        "abc-accordion": HTMLAbcAccordionElement;
        "abc-accordion-group": HTMLAbcAccordionGroupElement;
        "abc-button": HTMLAbcButtonElement;
        "abc-dropdown": HTMLAbcDropdownElement;
        "abc-dropdown-button": HTMLAbcDropdownButtonElement;
        "abc-flyout": HTMLAbcFlyoutElement;
        "abc-flyout-item": HTMLAbcFlyoutItemElement;
        "abc-icon-chevron-down": HTMLAbcIconChevronDownElement;
    }
}
declare namespace LocalJSX {
    interface AbcAccordion {
        "item"?: string;
        "onAccordionClick"?: (event: AbcAccordionCustomEvent<{ open: boolean; item?: string }>) => void;
        "open"?: boolean;
        "summary"?: string;
        "variant"?: ACCORDION_VARIANTS;
    }
    interface AbcAccordionGroup {
        "onAccordionChange"?: (event: AbcAccordionGroupCustomEvent<HTMLAbcAccordionElement['item']>) => void;
        "selectedAccordion"?: HTMLAbcAccordionElement['item'];
    }
    interface AbcButton {
        "ariaLabel"?: string;
        "as"?: BUTTON_TYPE;
        "disabled"?: boolean;
        "href"?: string;
        "size"?: BUTTON_SIZES;
        "target"?: '_blank' | '_self' | '_parent' | '_top';
        "type"?: 'button' | 'submit' | 'reset';
        "variant"?: BUTTON_VARIANTS;
    }
    interface AbcDropdown {
        "disabled"?: boolean;
        "error"?: string;
        "hint"?: string;
        "label": string;
        "onDropdownChange"?: (event: AbcDropdownCustomEvent<HTMLAbcFlyoutItemElement['item']>) => void;
        "open"?: boolean;
        "required"?: boolean;
        "selectedItem"?: HTMLAbcFlyoutItemElement['item'];
        "text": string;
    }
    interface AbcDropdownButton {
        "disabled"?: boolean;
        "label"?: string;
        "onDropdownButtonBlur"?: (event: AbcDropdownButtonCustomEvent<void>) => void;
        "onDropdownButtonClick"?: (event: AbcDropdownButtonCustomEvent<void>) => void;
        "onDropdownButtonFocus"?: (event: AbcDropdownButtonCustomEvent<void>) => void;
        "open"?: boolean;
        "placeholder"?: boolean;
        "required"?: boolean;
        "text": string;
    }
    interface AbcFlyout {
        "onFlyoutChange"?: (event: AbcFlyoutCustomEvent<HTMLAbcFlyoutItemElement['item']>) => void;
        "selectedItem"?: HTMLAbcFlyoutItemElement['item'];
    }
    interface AbcFlyoutItem {
        "item": string;
        "label": string;
        "onItemClick"?: (event: AbcFlyoutItemCustomEvent<{ item: string; selected: boolean }>) => void;
        "selected"?: boolean;
    }
    interface AbcIconChevronDown {
        "size"?: ICON_SIZES;
    }
    interface IntrinsicElements {
        "abc-accordion": AbcAccordion;
        "abc-accordion-group": AbcAccordionGroup;
        "abc-button": AbcButton;
        "abc-dropdown": AbcDropdown;
        "abc-dropdown-button": AbcDropdownButton;
        "abc-flyout": AbcFlyout;
        "abc-flyout-item": AbcFlyoutItem;
        "abc-icon-chevron-down": AbcIconChevronDown;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "abc-accordion": LocalJSX.AbcAccordion & JSXBase.HTMLAttributes<HTMLAbcAccordionElement>;
            "abc-accordion-group": LocalJSX.AbcAccordionGroup & JSXBase.HTMLAttributes<HTMLAbcAccordionGroupElement>;
            "abc-button": LocalJSX.AbcButton & JSXBase.HTMLAttributes<HTMLAbcButtonElement>;
            "abc-dropdown": LocalJSX.AbcDropdown & JSXBase.HTMLAttributes<HTMLAbcDropdownElement>;
            "abc-dropdown-button": LocalJSX.AbcDropdownButton & JSXBase.HTMLAttributes<HTMLAbcDropdownButtonElement>;
            "abc-flyout": LocalJSX.AbcFlyout & JSXBase.HTMLAttributes<HTMLAbcFlyoutElement>;
            "abc-flyout-item": LocalJSX.AbcFlyoutItem & JSXBase.HTMLAttributes<HTMLAbcFlyoutItemElement>;
            "abc-icon-chevron-down": LocalJSX.AbcIconChevronDown & JSXBase.HTMLAttributes<HTMLAbcIconChevronDownElement>;
        }
    }
}
